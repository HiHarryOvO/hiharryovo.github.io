<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>KMP 算法详解</title>
      <link href="2022/04/21/kmp-introduction/"/>
      <url>2022/04/21/kmp-introduction/</url>
      
        <content type="html"><![CDATA[<p>最近学习了字符串匹配中非常有名的 KMP 算法（KMP 是 Knuth-Morris-Pratt 的缩写，是发明这个算法的三个人的名字）。KMP 算法是串匹配中的一个重要成果，因为它是第一个线性时间复杂度的串匹配算法。</p><h3 id="问题简介">问题简介</h3><p>串匹配问题要求我们在文本串 T 中寻找满足模式串 P 的部分，例如：</p><pre class="line-numbers language-none"><code class="language-none">T &#x3D; &quot;今天是晴天，明天是晴天，后天不一定是晴天&quot;P &#x3D; &quot;晴天&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>串匹配问题会有以下几种形式的子问题：</p><ul><li>detection：P 是否出现在 T 中？（P 出现在 T 中，以下均讨论上面的例子）</li><li>location：P 首次在哪里出现？（P 的首次出现位置在下标 3）</li><li>counting：P 共出现几次？（P 出现 3 次）</li><li>enumeration：各出现在哪里？（P 的出现位置下标分别为 3,9,18）</li></ul><p>在上述任务中，只要我们能够完成 location 任务，即判断 P 的首次出现位置，就可以很轻松地解决另外几项任务，也就是说，只要我们学会匹配 1 次，那么就学会了匹配多次。因此以下讨论我们主要以解决 location 问题为主。</p><h3 id="蛮力算法-brute-force">蛮力算法 Brute Force</h3><p>首先回顾一下蛮力算法。在本问题中，蛮力算法有两种思路，根据具体实现可以分为 固定单一指针 和 双指针同时移动 两种。在这两种解法中，我们都需要两个指针 <code>i</code> 和 <code>j</code>，各自指向文本串和模式串。</p><ul><li>1、固定单一指针</li></ul><p>固定单一指针的思路非常直白：以文本串中的每个位置为<strong>起点</strong>，与模式串尝试匹配，如果失配则以下一位置为起点，重复这一过程。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 蛮力算法 1</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>            <span class="token keyword">if</span> text<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token keyword">break</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> i <span class="token keyword">if</span> i <span class="token operator">&lt;</span> m <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，<code>i</code> 表示当前文本串中视为匹配起点的位置，<code>j</code> 表示当前模式串中匹配到的位置，<code>i + j</code> 即是当前文本串中匹配到的位置。我们每次固定 <code>i</code>，然后根据匹配完成不断移动 <code>j</code>；匹配失败则从 <code>i+1</code> 位置重新开始。</p><p>对我自己而言，在没有学习 KMP 算法之前，提到字符串匹配的蛮力算法，我一定会想到这一个做法。但其实下面提到的双指针同时移动的解法，更有助于我们后面去理解 KMP 算法的过程。</p><ul><li>2、双指针同时移动</li></ul><p>在这个算法中，我们在匹配过程中同时更新文本串和模式串中的指针，一旦发生失配，根据目前已经匹配的部分将两个指针回退到对应的位置。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 蛮力算法 2</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">if</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            i <span class="token operator">-=</span> j <span class="token operator">-</span> <span class="token number">1</span>            j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token keyword">if</span> i <span class="token operator">-</span> j <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>i</code> 位置和 <code>j</code> 位置匹配，则 <code>i</code> 和 <code>j</code> 同时移动。如果失配，<code>j</code> 回退到 0，我们根据 <code>j</code> 的回退可以计算出 <code>i</code> 在 <code>i-j</code> 这一起点处无法匹配，因此应当回退到 <code>i-j</code> 的下一位置，即 <code>i-j+1</code>。</p><p>关于返回结果的判断，最后理应返回起点位置在 <code>i-j</code>，如果文本串 <code>i-j</code> 位置到终点的长度不足 n，那么说明文本串中无法匹配到模式串。</p><p>对于上述两种蛮力算法，若 m 和 n 分别表示文本串和模式串的长度，在最坏情况下，每次比对都几乎需要 n 次，同时需要遍历整个文本串，因此时间复杂度为 O(n * m)。一种产生最坏情况的例子如下：</p><pre class="line-numbers language-none"><code class="language-none">T &#x3D; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAB&quot;P &#x3D; &quot;AAAAB&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>观察上面的例子，以及分析最坏情况产生的条件——从文本串的每个位置开始比对都几乎需要 n 次，说明文本串中有非常多重复的部分，因此可以推断出字符集 |∑| 的大小对于算法效率也有影响。|∑| 越小，文本串中越可能出现重复部分，最坏情况出现的概率越高。而模式串长度 n 越大，最坏情况的后果也更加严重（m &gt;&gt; n，时间复杂度为 O(m * n)，因此 n 稍微增加即会引入很多计算量）。</p><h3 id="kmp-算法原理">KMP 算法原理</h3><p>KMP 算法的一个核心思想就是减少匹配过程中的重复比对。具体如何减少重复比对呢？看下面这个例子。</p><pre class="line-numbers language-none"><code class="language-none">T &#x3D; &quot;CHILLCHILLCHIK&quot;P &#x3D; &quot;CHILLCHIA&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先我们会以文本串 T 的第一个字符 "C" 作为起点开始匹配，然后依次匹配 "H"、"I"、"L"、"C"、"H"、"I"，在下一个位置 "L-A" 发生失配。按照两种蛮力算法的思路，接下来会以文本串的第二个字符 "H" 作为起点尝试匹配。</p><p>反思这个过程，以 "C" 为起点的匹配在 "L-A" 位置失败后，我们选择以 "H" 为起点。但是，根据之前的匹配信息我们知道，下一个 "C" 在下标 5 的位置，因此在 "L-A" 位置失败后我们应该尝试以下标 5 为起点，而不是以下标 1 位置的 "H" 为起点。下一次匹配的字符应该是文本串 T 的下标 8 的 "L" 和模式串 P 的下标为 3 的 "L"。</p><p>也就是说，如果我们的算法“记得”之前匹配过哪些字符，即可跳过一些多余的匹配，直接调整到需要的位置。这个过程中，文本串 T 的指针 i 不发生改变，我们只需要移动模式串 P 的指针 j 即可（注意到这里的流程与蛮力算法 2 非常接近，区别在于蛮力算法需要回退 i，KMP 不用，而蛮力算法 j 回退到 0，KMP 算法中 j 回退到 <code>next[j]</code>）。因此我们可以构建一张 next 查询表，<code>k = next[j]</code> 表示如果当前位置 <code>T[i] != P[j]</code>，即发生失配，接下来应该比较 <code>T[i]</code> 和 <code>P[k]</code>。</p><p>因此我们可以写出 KMP 算法的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">kmp_find</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    nex <span class="token operator">=</span> build_next<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>  <span class="token comment"># how to implement this?</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> nex<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token keyword">if</span> i <span class="token operator">-</span> j <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（P.S.: Python 中 next 是内置的用于迭代器的函数，因此我偏好在代码中使用 nex 来指代 next 数组）</p><p>从上面的代码中我们可以看到，<code>i</code> 和 <code>j</code> 匹配时，各自前进一步；一旦发生失配，使用 <code>i</code> 和 <code>nex[j]</code> 尝试匹配。这就是 KMP 算法的整体流程。</p><p>在本节开头的例子中，根据我们对于 next 表的理解，模式串 "CHILLCHIA" 的 next 表应该写成这样：</p><pre class="line-numbers language-none"><code class="language-none">C  H I L L C H I A-1 0 0 0 0 0 1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码中 <code>j &lt; 0</code> 的部分对应着 next 表中首项 <code>next[0] = -1</code> 的位置。如果 T 和 P 在 <code>P[0]</code> 的位置失配了，我们需要将 <code>i</code> 右移一位，尝试下一位置作为起点。但是我们的代码的主要思路是：<code>i</code> 要么和 <code>j</code> 同时移动要么不移动。为了方便我们设置 <code>j = -1</code>，并让算法在 <code>j &lt; 0</code> 的时候将 <code>i</code> 和 <code>j</code> 同时右移一位。这样达到了 <code>i</code> 右移并且 <code>j</code> 归位到 0 的效果，并且保证了代码的简洁性。</p><p>接下来的问题就是：如何实现构建 next 表的函数？</p><p>根据我们之前的描述，next 表用于指示 <code>P[j]</code> 处失配时应该替换 <code>j</code> 的下标。能够这样操作，是因为模式串的后缀和前缀产生了重复部分。例如 "CHILLCHIA" 中前后两个不同的 "CHI"。因此，从另一种角度来看，<code>next[j]</code> 是在 <code>P[0,j)</code> 中，最大自匹配的真前缀和真后缀的长度。</p><p>我们考虑使用<strong>递推</strong>的思想来计算 next 数组。<code>next[k+1]</code> 的取值，即是 <code>P[0, k+1)</code>（或者表示为 <code>P[0,k]</code>）中最大自匹配的真前缀和真后缀的长度。如果 <code>P[k] == P[next[k]]</code>，那么有 <code>next[k+1] = next[k] + 1</code>。</p><p>如果 <code>P[k] != P[next[k]]</code>，那么说明 <code>next[k]</code> 长度的前缀（or say 后缀）在 <code>P[0,k]</code> 范围内不可行，我们需要接着去看 <code>P[next[next[k]]]</code>，也就是一个更短的前缀。如果 <code>P[next[next[k]]]</code> 可行，<code>next[k+1] = next[next[k]] + 1</code>。如果不可行，则需要继续嵌套调用 next，直到最终查询到 <code>next[0] = -1</code>。</p><p>结合实际的例子去理解：</p><pre class="line-numbers language-none"><code class="language-none">C  H I L L C H I A-1 0 0 0 0 0 1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个例子中，下标 6 位置的字符为 H，<code>next[6]</code> 需要考虑 <code>P[0:5]</code>，即 "CHILLC" 的最大自匹配真前缀和真后缀长度，可以看出是 "C"，因此 <code>next[6] = 1</code>。对于 <code>next[7]</code> 而言，对比 <code>P[6] = "H"</code> 和 <code>P[next[6]] = P[1] = "H"</code>，二者相等，因此 <code>next[7] = next[6] + 1</code>。</p><p>我在学习 KMP 算法的时候最开始一直没有理解什么时候需要调用 <code>next[next[k]]</code> 去替换 <code>next[k]</code>，感觉这个递归调用非常抽象，容易陷入“既然 <code>P[k]</code> 和 <code>P[next[k]]</code> 不相等，那设置 <code>next[k+1] = 0</code> 不就可以了吗”这种思维误区。实际上用具体的例子来说明会更容易理解：</p><pre class="line-numbers language-none"><code class="language-none">C  H I L L C H I A C H I L L C H I L L-1 0 0 0 0 0 1 2 3 0 1 2 3 4 5 6 7 8 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果理解了 next 数组的基本原理，除了最后一个字符的所有位置的取值都可以理解。我们先来看倒数第二个字符 "L"，此处匹配到的最长公共前后缀是 "CHILLCHI"，尽管当前位置的 "L" 和 "A" 并不匹配，但是不影响此处 next 的取值。到了最后一个字符 "L"，此时 "CHILLCHIA" 和 "CHILLCHIL" 并不匹配，<strong>但这并不意味着我们要丢弃整个 "CHILLCHIL" 部分，"CHIL" 是一个可行的、更短的最长前后缀</strong>。这也就是为什么我们需要递归去调用 next。</p><p>由此可以写出构建 next 数组的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_next</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    nex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    nex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    t<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> text<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> text<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            t <span class="token operator">+=</span> <span class="token number">1</span>            nex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t        <span class="token keyword">else</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> nex<span class="token punctuation">[</span>t<span class="token punctuation">]</span>    <span class="token keyword">return</span> nex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度分析：令 <code>k = 2*i - j</code>，在 <code>kmp_find()</code> 代码中，每次循环中，如果进入 if 条件内，<code>i</code> 和 <code>j</code> 同时加 1，<code>k</code> 因此加 1；如果进入 else 条件内，<code>i</code> 不变，<code>j</code> 至少减 1，<code>k</code> 因此至少加 1。因此 <code>k</code> 是迭代步数的<strong>上界</strong>。</p><p><span class="math display">\[k = 2i - j \le 2(m - 1) - (-1) = 2m - 1 = O(m)\]</span></p><p>结合构建 next 表需要的时间复杂度为 O(n)，因此可知，KMP 算法时间复杂度为 O(n + m)。</p><p>然而，上述算法仍有优化空间：</p><pre class="line-numbers language-none"><code class="language-none">T &#x3D; &quot;AAABAAAAAAAB&quot;P &#x3D; &quot;AAAAAAB&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一次匹配失败于下标 3，即 "B-A" 处。失败后需要用 <code>next[j]</code> 替换 j，即用 <code>P[2]</code> 替换 <code>P[3]</code>，<code>P[2]</code> 失败后再用 <code>P[1]</code> 替换 <code>P[2]</code>，以及用 <code>P[0]</code> 替换 <code>P[1]</code>，至此才发现全部都不匹配。</p><p>这个过程的问题在于：我们每次用模式串 P 中的 "A" 尝试去匹配文本串 T 的 "B" 失败后，下次和 "B" 尝试匹配的仍然是字符 "A"。根据 next 表的定义可知，<code>next[j]</code> 用到了 <code>P[0,j-1]</code> 的经验知识，却没有用到 <code>P[j]</code> 位置的信息。</p><p>因此我们对 next 表的构造算法稍加修改，思路为：只有 <code>P[j] != P[t]</code> 时才将 t 赋值给 <code>next[j]</code>，否则将 <code>next[t]</code> 赋值给 <code>next[j]</code>。具体代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">build_next</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    nex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    nex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    t<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> text<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> text<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            t <span class="token operator">+=</span> <span class="token number">1</span>            nex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token keyword">if</span> text<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> text<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token keyword">else</span> nex<span class="token punctuation">[</span>t<span class="token punctuation">]</span>  <span class="token comment"># 在此处优化处理</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> nex<span class="token punctuation">[</span>t<span class="token punctuation">]</span>    <span class="token keyword">return</span> nex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码">代码</h3><p>整合上面的 KMP 算法主部分以及 next 数组构建算法部分，最终代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># next 数组构建方法</span><span class="token keyword">def</span> <span class="token function">build_next</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    nex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    nex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    t<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> t <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> text<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> text<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">:</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            t <span class="token operator">+=</span> <span class="token number">1</span>            nex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token keyword">if</span> text<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> text<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token keyword">else</span> nex<span class="token punctuation">[</span>t<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> nex<span class="token punctuation">[</span>t<span class="token punctuation">]</span>    <span class="token keyword">return</span> nex<span class="token comment"># KMP 算法主代码</span><span class="token keyword">def</span> <span class="token function">kmp_find</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    nex <span class="token operator">=</span> build_next<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>  <span class="token comment"># how to implement this?</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> nex<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token keyword">if</span> i <span class="token operator">-</span> j <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结">总结</h3><p>KMP 算法的精妙之处在于：抓住文本匹配中“重复匹配”这一关键问题，结合模式串自身结构特点建表，利用过往匹配的经验知识为后续的匹配过程节省计算量。</p><p>尽管在面试中 KMP 算法被认为是“超纲考点”，但是作为文本匹配里面的经典算法，通过巧妙的构思将原本 O(n * m) 复杂度的算法优化到 O(n + m)，是非常厉害的事情，也体现了算法设计之美，我个人感觉还是很有必要学习了解一下。</p><h3 id="参考资料">参考资料</h3><ul><li><a href="https://dsa.cs.tsinghua.edu.cn/~deng/ds/dsacpp/">数据结构</a>（C++ 语言版及 MOOC 课程），邓俊辉，清华大学</li><li><a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm">KMP算法</a>，维基百科</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Tips】计算某文件夹及其所有子文件夹内的文件数量</title>
      <link href="2021/09/02/count-all-files/"/>
      <url>2021/09/02/count-all-files/</url>
      
        <content type="html"><![CDATA[<p>今天处理了 UCF-101 数据集，数据集的文件存储结构大概是这样：</p><pre class="line-numbers language-none"><code class="language-none">- ApplyEyeMakeup    - v_ApplyEyeMakeup_g01_c01.avi    - v_ApplyEyeMakeup_g01_c02.avi    ...- ApplyLipstick...- YoYo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我做了抽取全部帧的处理之后，文件存储结构变成：</p><pre class="line-numbers language-none"><code class="language-none">- ApplyEyeMakeup    - v_ApplyEyeMakeup_g01_c01.avi        - 1.jpg        - 2.jpg        ...    - v_ApplyEyeMakeup_g01_c02.avi    ...- ApplyLipstick...- YoYo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前来看我还不知道这样 抽帧 -&gt; 存储图像 的处理是不是应对这种视频数据集的最好办法（指效率最高），但是应该是可行的。后面考虑怎么生成 Dataset 类以及生成 batch 这样。</p><p>在这个过程中我想到一个问题，怎样计算一个文件夹下<strong>所有</strong>的文件数量呢？所有 就是指包括所有子文件夹内部的文件。大致找了三种方法，在 UCF-101 视频数据文件夹（共 13320 个视频）上运行 有肉眼可见的速度差异。</p><h3 id="linux-命令行-最快">Linux 命令行 （最快）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> datasets/UCF-101 -type f <span class="token operator">|</span> <span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python-使用-os.walk-第二快">Python 使用 os.walk （第二快）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">noOfFiles <span class="token operator">=</span> <span class="token number">0</span>noOfDir <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> base<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">"datasets/UCF-101"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> directories <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>        noOfDir <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> Files <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token comment"># 文件数量</span>        noOfFiles <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python-递归-最慢">Python 递归 （最慢）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countFile</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> countFile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感觉不同方法的底层实现导致了这里的效率差异。如果之后回顾的时候看到了可以好好分析一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 数据集 </tag>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test 测试一些 markdown 功能</title>
      <link href="2021/09/01/test/"/>
      <url>2021/09/01/test/</url>
      
        <content type="html"><![CDATA[<p>测试一些常用的 markdown 功能，包括代码块、表格、图片、公式（大概能基本涵盖写文章的需要？gif、视频 之类的后面再看看）。参考了 <a href="https://www.runoob.com/markdown/md-tutorial.html">markdown 教程</a></p><h3 id="基础文本">基础文本</h3><p>第一段：关于 transformer 的一些知识。</p><p>第二段：关于 BERT 的一些知识。</p><h3 id="代码块">代码块</h3><p>测试一些 python 代码高亮。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">"122 341 35"</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>：    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格">表格</h3><table><thead><tr class="header"><th style="text-align: left;">左对齐</th><th style="text-align: right;">右对齐</th><th style="text-align: center;">居中对齐</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr><tr class="even"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr></tbody></table><h3 id="图片">图片</h3><figure><img src="/images/cat.jpg" title="一只猫猫" alt="猫猫" /><figcaption aria-hidden="true">猫猫</figcaption></figure><h3 id="公式">公式</h3><p>行内公式 \(a + b = c\)</p><p>英文小括号和行内公式产生冲突，修改了 <code>post.ejs</code> 中如下部分：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;% if (theme.mathjax.enable &amp;&amp; page.mathjax) &#123; %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.mathjax.cdn %><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        tex2jax<span class="token operator">:</span> <span class="token punctuation">&#123;</span>inlineMath<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'\('</span><span class="token punctuation">,</span> <span class="token string">'\)'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&lt;% &#125; %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 <code>\\(</code> 和 <code>\\)</code> 替换 <code>\(</code> 和 <code>\)</code>。</p><p>单独处理的公式：</p><p><span class="math display">\[tanh = \frac{e^x-e^{-x}}{e^x+e^{-x}}\]</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/08/01/hello-world/"/>
      <url>2021/08/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
