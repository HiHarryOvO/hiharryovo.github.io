<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="2021/09/27/hello-world/"/>
      <url>2021/09/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Tips】计算某文件夹及其所有子文件夹内的文件数量</title>
      <link href="2021/09/02/count-all-files/"/>
      <url>2021/09/02/count-all-files/</url>
      
        <content type="html"><![CDATA[<p>今天处理了 UCF-101 数据集，数据集的文件存储结构大概是这样：</p><pre class="line-numbers language-none"><code class="language-none">- ApplyEyeMakeup    - v_ApplyEyeMakeup_g01_c01.avi    - v_ApplyEyeMakeup_g01_c02.avi    ...- ApplyLipstick...- YoYo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我做了抽取全部帧的处理之后，文件存储结构变成：</p><pre class="line-numbers language-none"><code class="language-none">- ApplyEyeMakeup    - v_ApplyEyeMakeup_g01_c01.avi        - 1.jpg        - 2.jpg        ...    - v_ApplyEyeMakeup_g01_c02.avi    ...- ApplyLipstick...- YoYo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前来看我还不知道这样 抽帧 -&gt; 存储图像 的处理是不是应对这种视频数据集的最好办法（指效率最高），但是应该是可行的。后面考虑怎么生成 Dataset 类以及生成 batch 这样。</p><p>在这个过程中我想到一个问题，怎样计算一个文件夹下<strong>所有</strong>的文件数量呢？所有 就是指包括所有子文件夹内部的文件。大致找了三种方法，在 UCF-101 视频数据文件夹（共 13320 个视频）上运行 有肉眼可见的速度差异。</p><h3 id="linux-命令行-最快">Linux 命令行 （最快）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> datasets/UCF-101 -type f <span class="token operator">|</span> <span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python-使用-os.walk-第二快">Python 使用 os.walk （第二快）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">noOfFiles <span class="token operator">=</span> <span class="token number">0</span>noOfDir <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> base<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">"datasets/UCF-101"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> directories <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>        noOfDir <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> Files <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token comment"># 文件数量</span>        noOfFiles <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python-递归-最慢">Python 递归 （最慢）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">countFile</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">+=</span> countFile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感觉不同方法的底层实现导致了这里的效率差异。如果之后回顾的时候看到了可以好好分析一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 数据集 </tag>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test 测试一些 markdown 功能</title>
      <link href="2021/09/01/test/"/>
      <url>2021/09/01/test/</url>
      
        <content type="html"><![CDATA[<p>测试一些常用的 markdown 功能，包括代码块、表格、图片、公式（大概能基本涵盖写文章的需要？gif、视频 之类的后面再看看）。参考了 <a href="https://www.runoob.com/markdown/md-tutorial.html">markdown 教程</a></p><h3 id="基础文本">基础文本</h3><p>第一段：关于 transformer 的一些知识。</p><p>第二段：关于 BERT 的一些知识。</p><h3 id="代码块">代码块</h3><p>测试一些 python 代码高亮。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token string">"122 341 35"</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span>：    ls<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格">表格</h3><table><thead><tr class="header"><th style="text-align: left;">左对齐</th><th style="text-align: right;">右对齐</th><th style="text-align: center;">居中对齐</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr><tr class="even"><td style="text-align: left;">单元格</td><td style="text-align: right;">单元格</td><td style="text-align: center;">单元格</td></tr></tbody></table><h3 id="图片">图片</h3><figure><img src="/images/cat.jpg" title="一只猫猫" alt="猫猫" /><figcaption aria-hidden="true">猫猫</figcaption></figure><h3 id="公式">公式</h3><p>行内公式 (a + b = c)</p><p>单独处理的公式：</p><p><span class="math display">\[tanh = \frac{e^x-e^{-x}}{e^x+e^{-x}}\]</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
